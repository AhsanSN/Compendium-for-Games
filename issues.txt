issues (will be opened on github)

issue 1: Find .exe file in folder

Create a function inside "js/renderer.js" can takes a folder name as input, and returns the static path (C:/...) of the the .exe file present in it. You are told that the folder will always contain one and only one .exe file.

issue 2: space for showing a screenshot

Edit the <code>viewgames.css</code> and <code>viewgames.html</code> such that the viewgames.html is divided into two vertical parts. One contains the list of games as in the present code, and the other will have space for 1 screenshot of the game.

issue 3: show screenshot in alloted space

(linked to issue 2)

Create a function in <code>renderer.js</code> that takes as input the path of an image file and shows it as the screenshot of the present game.

issue 4: store screenshots in database

Edit the database.js such that now GamesDB.txt stores 4 values instead of 3. The new stored value (4th line in database)should be an image path. Make new functions if required.

issue 5: take screenshot as input

Edit <code>uploadgame.html</code> and <code>uploadgame.js</code> and add an option of uploading 1 screenshot image of the image. This image path should then be added to the database. 

issue 6: add gameRunning.html

Add another screen "gameRunning.html" that should run once an exe has started running. It should contain a return option that sends the user to "viewGames.html"

issue 7: select exe name from database

Edit the "js/renderer.js", such that when a game is selected, the path of the selected game should not be dynamically made, but should be selected from "GamesDB.txt". Make necessary functions in <code>database.js</code>

issue 8: Create shortcut on desktop

Create necessay file and functions that are run when the software is run. The file will check if there is a software's shortcut on the user's desktop. If not, it will create the exe's shortcut.

issue 9: electron-db as the new database

Use "electron-db" as the software's database instead of <code>GamesDB.txt</code>. Replace all the present functions. Create a new file <code>e-Database.js</code> and dont edit the current <code>database.js</code>.

issue 10: load all static files in beginning

Take advantage of asynchronous programming and load all static files (css/js) from main.js instead of the respective <code>.html</code> files. This should reduce the loading time of the software.

issue 11: Get username of the loggedin user

Create a function <code>getUsername()</code> inside <code>uploadGame.js</code> that returns the computers username. This will later be used when uploading the game to the cloud using the software.

Rough: <code></code>

Best of luck. 




